apply plugin: "com.android.application"
apply from: "../../node_modules/react-native/react.gradle"

import com.android.build.OutputFile

project.ext.react = [
        entryFile: "index.js"
]


android {
    compileSdkVersion 26
    buildToolsVersion '26.0.3'


    defaultConfig {
//        applicationId "com.dongxin"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 2
        versionName "2.0.0"
        flavorDimensions "versionCode"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        multiDexEnabled = true
    }
    splits {
        abi {
            reset()
            //拆分平台架构
            enable false
            //拆分APK If true, also generate a universal APK
            universalApk false
            include "armeabi-v7a", "x86"
        }
    }

    productFlavors {
        ETRCDev {
            applicationId "com.quandu.etrcchain.dev"
        }
        ETRCBeta {
            applicationId "com.quandu.etrcchain.beta"
        }
        ETRC {
            applicationId "com.quandu.etrcchain"
        }
    }

    //签名
    signingConfigs {
        release {
            storeFile file("Qdkj6688.jks")      //签名文件
            storePassword "Qdkj6688"
            keyAlias "qdkj"
            keyPassword "Qdkj6688"
        }
    }

    buildTypes {
//        debug {
//            debuggable true
//            minifyEnabled false
//            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//        }
        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // 自定义输出配置
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
            // 打包apk名称
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = "${variant.productFlavors[0].name}_${defaultConfig.versionName}.apk"
//                output.outputFile = new File(outputFile.parent, fileName)
//            }

            android.applicationVariants.all {
                variant.outputs.all {
                    outputFileName = "${variant.productFlavors[0].name}V${defaultConfig.versionName}.apk"
                }
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.1.0'
    // From node_modules
    compile 'com.facebook.react:react-native:+'
    // imagePicker
    compile 'id.zelory:compressor:2.1.0'
    compile 'com.yalantis:ucrop:2.2.0-native'
    implementation files('libs/open_sdk_r5793_lite.jar')
    implementation files('libs/gson-2.3.1.jar')
    implementation files('libs/libammsdk.jar')
    implementation files('libs/alipaySdk-20180403.jar')

    implementation project(':react-native-camera')

    implementation 'com.android.support:multidex:1.0.3'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
